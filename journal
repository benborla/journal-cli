#!/usr/bin/env bash

# Daily Journal Script
# Author: Ben Borla
# Email: benborla@icloud.com
# License: MIT
# Description: A simple script to manage daily journal entries

set -euo pipefail

# Default Configuration
DEFAULT_JOURNAL_DIR=~/journal
DEFAULT_DATE_FORMAT="%m-%d-%Y"
DEFAULT_EDITOR=vim

# Configuration file
CONFIG_FILE=~/.journal_config

# Function to load configuration
load_config() {
  if [[ -f "$CONFIG_FILE" ]]; then
    source "$CONFIG_FILE"
  fi

  JOURNAL_DIR=${JOURNAL_DIR:-$DEFAULT_JOURNAL_DIR}
  DATE_FORMAT=${DATE_FORMAT:-$DEFAULT_DATE_FORMAT}
  EDITOR=${EDITOR:-$DEFAULT_EDITOR}
}

# Function to save configuration
save_config() {
  cat >"$CONFIG_FILE" <<EOF
JOURNAL_DIR="$JOURNAL_DIR"
DATE_FORMAT="$DATE_FORMAT"
EDITOR="$EDITOR"
EOF
  echo "Configuration saved to $CONFIG_FILE"
}

# Function to display usage information
show_help() {
  cat <<EOF
Usage: ${0##*/} [OPTIONS] [DATE]

Manage your daily journal entries.

Options:
  -h, --help              Display this help message and exit
  -v, --version           Display version information and exit
  --list                  List all journal entries
  --set-journal-dir DIR   Set the journal directory
  --set-editor EDITOR     Set the preferred editor

DATE can be:
  - Empty (default to today)
  - 'yesterday'
  - A specific date in $DATE_FORMAT format

Examples:
  ${0##*/}
  ${0##*/} yesterday
  ${0##*/} 10-18-2024
  ${0##*/} --list
  ${0##*/} --set-journal-dir ~/my_journals
  ${0##*/} --set-editor vim
EOF
}

# Function to display version information
show_version() {
  echo "${0##*/} version 1.1.1"
}

# Function to get the date in the specified format
get_date() {
  local input_date="$1"
  if [ -z "$input_date" ]; then
    date +"$DATE_FORMAT"
  elif [ "$input_date" = "yesterday" ]; then
    if [[ "$OSTYPE" == "darwin"* ]]; then
      date -v-1d +"$DATE_FORMAT"
    else
      date -d "yesterday" +"$DATE_FORMAT"
    fi
  else
    if [[ "$OSTYPE" == "darwin"* ]]; then
      date -j -f "$DATE_FORMAT" "$input_date" +"$DATE_FORMAT" 2>/dev/null || {
        echo "Error: Invalid date format. Please use $DATE_FORMAT or 'yesterday'." >&2
        exit 1
      }
    else
      date -d "$input_date" +"$DATE_FORMAT" 2>/dev/null || {
        echo "Error: Invalid date format. Please use $DATE_FORMAT or 'yesterday'." >&2
        exit 1
      }
    fi
  fi
}

# Function to format date for display (Month DD, YYYY)
format_date_for_display() {
  local date_string="$1"
  if [[ "$OSTYPE" == "darwin"* ]]; then
    date -j -f "$DATE_FORMAT" "$date_string" "+%B %d, %Y"
  else
    date -d "$date_string" "+%B %d, %Y"
  fi
}

# Function to create a new journal entry
create_journal_entry() {
  local journal_file="$1"
  local entry_date="$2"

  cat <<EOF >"$journal_file"
Filename: $(basename "$journal_file")

# Daily Journal - $entry_date
## Morning Reflection
### Gratitude
Three things I'm grateful for today:
1. 
2. 
3. 
### Meditation
- [ ] I've completed a 5-minute meditation
### Yesterday's Review
- How I did yesterday:
  
- Who I was yesterday:
  
- Were my actions yesterday in line with my goals?
  - [ ] Yes
  - [ ] No
  - If no, what can I improve?
## Today's Intentions
### Who I'm Going to Be Today
I intend to embody the following qualities today:
- 
- 
- 
### My Intentions for Today
Top 3 priorities:
1. 
2. 
3. 
## Evening Reflection
(Fill this out at the end of your day)
### Today's Achievements
- 
### Lessons Learned
- 
### Tomorrow's Focus
- 
---
Remember: "I am capable of greatness, and I take purposeful action each day to manifest my potential."
EOF
  echo "Created new journal entry for $entry_date."
}

# Function to add filename to existing journal entry
add_filename_to_entry() {
  local journal_file="$1"
  local temp_file
  temp_file=$(mktemp)

  if ! grep -q "^Filename: " "$journal_file"; then
    echo "Filename: $(basename "$journal_file")" >"$temp_file"
    echo "" >>"$temp_file" # Add a blank line after the filename
    cat "$journal_file" >>"$temp_file"
    mv "$temp_file" "$journal_file"
  else
    rm "$temp_file"
  fi
}

# Function to list all journal entries
list_entries() {
  printf "Journal entries in $JOURNAL_DIR:\n\n"
  local entry_count=0
  for entry in "$JOURNAL_DIR"/*.md; do
    if [[ -f "$entry" ]]; then
      local filename=$(basename "$entry")
      local date_part="${filename%.*}"
      if [[ $date_part =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]]; then
        local formatted_date=$(format_date_for_display "$date_part")
        echo "- $formatted_date"
        ((entry_count++))
      fi
    fi
  done

  if [[ $entry_count -eq 0 ]]; then
    echo "No journal entries found."
  else
    printf "\nTotal entries: $entry_count\n"
  fi
}

# Main function
main() {
  load_config

  local date_arg=""

  # Parse command-line options
  while [[ $# -gt 0 ]]; do
    case $1 in
    -h | --help)
      show_help
      exit
      ;;
    -v | --version)
      show_version
      exit
      ;;
    --list)
      list_entries
      exit
      ;;
    --set-journal-dir)
      if [[ -n "$2" ]]; then
        JOURNAL_DIR="$2"
        save_config
        echo "Journal directory set to: $JOURNAL_DIR"
        exit
      else
        echo "Error: --set-journal-dir requires a directory path." >&2
        show_help
        exit 1
      fi
      ;;
    --set-editor)
      if [[ -n "$2" ]]; then
        EDITOR="$2"
        save_config
        echo "Editor set to: $EDITOR"
        exit
      else
        echo "Error: --set-editor requires an editor name." >&2
        show_help
        exit 1
      fi
      ;;
    --*)
      echo "Error: Unknown option $1" >&2
      show_help
      exit 1
      ;;
    *)
      date_arg=$1
      break
      ;;
    esac
    shift
  done

  # Get the date and create the journal file path
  DATE=$(get_date "$date_arg")
  JOURNAL_FILE="$JOURNAL_DIR/$DATE.md"

  # Create the journal directory if it doesn't exist
  mkdir -p "$JOURNAL_DIR"

  # Create or load the journal entry
  if [ ! -f "$JOURNAL_FILE" ]; then
    create_journal_entry "$JOURNAL_FILE" "$(format_date_for_display "$DATE")"
  else
    echo "Loading journal entry for $(format_date_for_display "$DATE")."
    add_filename_to_entry "$JOURNAL_FILE"
  fi

  # Open the file with the specified editor
  "$EDITOR" "$JOURNAL_FILE"
}

# Run the main function
main "$@"
